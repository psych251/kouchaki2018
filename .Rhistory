library(tidyverse)
library(ggthemes)
setwd("/Users/nickysullivan/Desktop/Psych_251/kouchaki2018")
PilotA_Data <- read.csv("PilotA_Data4.csv")
head(PilotA_Data)
PilotA_Data_fil <- PilotA_Data %>%
select(Finished, PromptEthical:DemoLang)
PilotA_Data_fil <- PilotA_Data_fil %>%
mutate(Condition = case_when(
grepl("a|e|i|o|u|y", PromptEthical) ~ 1,
grepl("a|e|i|o|u|y", PromptUnethical) ~ 2,
grepl("a|e|i|o|u|y", PromptTypical) ~ 3
))
View(PilotA_Data_fil)
PilotA_Data_fil <- PilotA_Data_fil %>%
filter(Finished == 1)
PilotA_Data_fil$Condition <- as.numeric(PilotA_Data_fil$Condition)
PilotA_Data_fil$AttCheckSit <-as.numeric(PilotA_Data_fil$AttCheckSit)
PilotA_Data_fil <- PilotA_Data_fil %>%
mutate(AttCheckSit = AttCheckSit-1)
PilotA_Data_fil <- PilotA_Data_fil %>%
mutate(Exclude1 = Condition/AttCheckSit)
PilotA_Data_fil <- PilotA_Data_fil %>%
filter(Exclude1 == 1)
PilotA_Data_fil <- PilotA_Data_fil %>%
filter(SelfDHCheck == 3)
PilotA_Data_fil <- PilotA_Data_fil %>%
select(SelfDH1:SelfDH10, Condition)
PilotA_Data_fil <- PilotA_Data_fil %>%
mutate_if(is.factor, as.character)
#Let's make Condition back to a factor, which will be helpful later
PilotA_Data_fil <- PilotA_Data_fil %>%
mutate(Condition = as.factor(Condition))
PilotA_Data_fil <- PilotA_Data_fil %>%
mutate_if(is.character, as.numeric)
PilotA_Data_fil <- PilotA_Data_fil %>%
mutate(SelfDH_Mean =
rowMeans(select
(., SelfDH1:SelfDH10)))
aov_results <- aov(SelfDH_Mean ~ Condition, data = PilotA_Data_fil)
summary(aov_results)
PilotA_Data_fil <- PilotA_Data_fil %>%
mutate(Condition_Label = case_when(
Condition == 1 ~ "Ethical",
Condition == 2 ~ "Unethical",
Condition == 3 ~ "Neutral")
)
positions <- c("Unethical", "Ethical", "Neutral")
ggplot(PilotA_Data_fil, aes(x=Condition_Label, y=SelfDH_Mean, fill=Condition_Label)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1") +
labs(y="Mind Attributed to Self") +
scale_x_discrete(limits = positions) +
coord_cartesian(ylim=c(4,7))
Original_Label <- c("Unethical", "Ethical", "Neutral")
Original_Means <- c(5.82, 6.23, 6.16)
Original_SDs <- c(1.11, .65, .73)
Original_ns <- c(49, 54, 53)
Original_Data <- data.frame(Original_Label, Original_Means, Original_SDs, Original_ns)
PilotA_Data_sum <- PilotA_Data_fil %>%
group_by(Condition_Label) %>%
summarise(Overall_SDH_Mean = mean(SelfDH_Mean),
Overall_SE = sd(SelfDH_Mean)/sqrt(length(Condition_Label)))
Original_Data_sum = Original_Data %>%
group_by(Original_Label) %>%
summarise(Orig_Over_SDH_Mean = mean(Original_Means),
Orig_Over_SE = Original_SDs/sqrt(Original_ns))
ggplot(Original_Data_sum, aes(x=Original_Label, y=Orig_Over_SDH_Mean, fill=Original_Label)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1") +
labs(title="Original Data", y="Mind Attributed to Self") +
scale_x_discrete(limits = positions) +
coord_cartesian(ylim=c(4,7)) +
geom_errorbar(aes(ymin = Orig_Over_SDH_Mean - Orig_Over_SE, ymax = Orig_Over_SDH_Mean + Orig_Over_SE), position = "dodge")
ggplot(PilotA_Data_sum, aes(x=Condition_Label, y=Overall_SDH_Mean, fill=Condition_Label)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1") +
labs(title="Replication Data", y="Mind Attributed to Self") +
scale_x_discrete(limits = positions) +
coord_cartesian(ylim=c(4,7)) +
geom_errorbar(aes(ymin = Overall_SDH_Mean - Overall_SE, ymax = Overall_SDH_Mean + Overall_SE), position = "dodge")
###Data Preparation
#Step one is to load libraries
library(tidyverse)
library(ggthemes)
#Next step is to import the data and make sure it looks ok
setwd("/Users/nickysullivan/Desktop/Psych_251/kouchaki2018")
PilotA_Data <- read.csv("PilotA_Data4.csv")
head(PilotA_Data)
#Next let's filter out all the columns that we won't be using
PilotA_Data_fil <- PilotA_Data %>%
select(Finished, PromptEthical:DemoLang)
#Next we want to try and make a new column for condition that tells us what prompt the participant got
PilotA_Data_fil <- PilotA_Data_fil %>%
mutate(Condition = case_when(
grepl("a|e|i|o|u|y", PromptEthical) ~ 1,
grepl("a|e|i|o|u|y", PromptUnethical) ~ 2,
grepl("a|e|i|o|u|y", PromptTypical) ~ 3
))
#Now we want to start excluding people. The first step we can actually exclude two of the three groups- those who didn't write anything and those who failed to answer the check where they reported what condition they were in. All we need to do is compare the Condition column to the check column, and if they're not the same exclude them
#This gets rid of rows we don't need
PilotA_Data_fil <- PilotA_Data_fil %>%
filter(Finished == 1)
#This converts the Condition column to numbers
PilotA_Data_fil$Condition <- as.numeric(PilotA_Data_fil$Condition)
#This converts the Att Check column to numbers
PilotA_Data_fil$AttCheckSit <-as.numeric(PilotA_Data_fil$AttCheckSit)
#This corrects for the fact that when you convert the Att Check column to numbers it screws it up by adding one to everything
PilotA_Data_fil <- PilotA_Data_fil %>%
mutate(AttCheckSit = AttCheckSit-1)
#This creates a column that is one if we should keep it and is something else otherwise
PilotA_Data_fil <- PilotA_Data_fil %>%
mutate(Exclude1 = Condition/AttCheckSit)
#And then this actually does the excluding
PilotA_Data_fil <- PilotA_Data_fil %>%
filter(Exclude1 == 1)
#Now we want to exclude anyone who failed the attention check built into the self-dehumanization scale, which is comparably a lot easier
PilotA_Data_fil <- PilotA_Data_fil %>%
filter(SelfDHCheck == 3)
#Now we can actually start the data analysis portion. First we want to simplify our table a bit to get rid of columns that are now unnecessary
PilotA_Data_fil <- PilotA_Data_fil %>%
select(SelfDH1:SelfDH10, Condition)
#Then convert to characters
PilotA_Data_fil <- PilotA_Data_fil %>%
mutate_if(is.factor, as.character)
#And finally convert to numeric- I tried doing this and the previous in one function, but it wouldn't work for some reason
PilotA_Data_fil <- PilotA_Data_fil %>%
mutate_if(is.character, as.numeric)
#Let's make Condition back to a factor, which will be helpful later
PilotA_Data_fil <- PilotA_Data_fil %>%
mutate(Condition = as.factor(Condition))
#Then we can actually calculate the mean scores for each person, which sets us up to perform the confirmatory analysis
PilotA_Data_fil <- PilotA_Data_fil %>%
mutate(SelfDH_Mean =
rowMeans(select
(., SelfDH1:SelfDH10)))
aov_results <- aov(SelfDH_Mean ~ Condition, data = PilotA_Data_fil)
summary(aov_results)
#One thing I wasn't sure about- is this the right kind of test to run? It's what they report running in the original paper (as best as I can tell), but it seems a little strange to run it given that the scores for individual participants are actually mean scores themselves.
#Let's add a column that will end up putting nicer labels on the graph
PilotA_Data_fil <- PilotA_Data_fil %>%
mutate(Condition_Label = case_when(
Condition == 1 ~ "Ethical",
Condition == 2 ~ "Unethical",
Condition == 3 ~ "Neutral")
)
positions <- c("Unethical", "Ethical", "Neutral")
Original_Label <- c("Unethical", "Ethical", "Neutral")
Original_Means <- c(5.82, 6.23, 6.16)
Original_SDs <- c(1.11, .65, .73)
Original_ns <- c(49, 54, 53)
Original_Data <- data.frame(Original_Label, Original_Means, Original_SDs, Original_ns)
#Let's get a summary put together so we can put error bars on the graphs
PilotA_Data_sum <- PilotA_Data_fil %>%
group_by(Condition_Label) %>%
summarise(Overall_SDH_Mean = mean(SelfDH_Mean),
Overall_SE = sd(SelfDH_Mean)/sqrt(length(Condition_Label)))
Original_Data_sum = Original_Data %>%
group_by(Original_Label) %>%
summarise(Orig_Over_SDH_Mean = mean(Original_Means),
Orig_Over_SE = Original_SDs/sqrt(Original_ns))
ggplot(PilotA_Data_sum, aes(x=Condition_Label, y=SelfDH_Mean, fill=Condition_Label)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1") +
labs(y="Mind Attributed to Self") +
scale_x_discrete(limits = positions) +
coord_cartesian(ylim=c(4,7))
ggplot(PilotA_Data_sum, aes(x=Condition_Label, y=Overall_SDH_Mean, fill=Condition_Label)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1") +
labs(y="Mind Attributed to Self") +
scale_x_discrete(limits = positions) +
coord_cartesian(ylim=c(4,7))
#This let's us plot the original data next to the replication to see how they compare
ggplot(Original_Data_sum, aes(x=Original_Label, y=Orig_Over_SDH_Mean, fill=Original_Label)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1") +
labs(title="Original Data", y="Mind Attributed to Self") +
scale_x_discrete(limits = positions) +
coord_cartesian(ylim=c(4,7)) +
geom_errorbar(aes(ymin = Orig_Over_SDH_Mean - Orig_Over_SE, ymax = Orig_Over_SDH_Mean + Orig_Over_SE), position = "dodge")
ggplot(PilotA_Data_sum, aes(x=Condition_Label, y=Overall_SDH_Mean, fill=Condition_Label)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1") +
labs(title="Replication Data", y="Mind Attributed to Self") +
scale_x_discrete(limits = positions) +
coord_cartesian(ylim=c(4,7)) +
geom_errorbar(aes(ymin = Overall_SDH_Mean - Overall_SE, ymax = Overall_SDH_Mean + Overall_SE), position = "dodge")
library(here)
library(tidyverse)
library(ggthemes)
setwd("~/Desktop/Psych_251")
Final_Data <- read.csv("Kouchaki_raw_data.csv")
setwd(here())
Final_Data <- read.csv("Kouchaki_raw_data.csv")
getwd()
setwd(here())
Final_Data <- read.csv("Kouchaki_raw_data.csv")
getwd()
Final_Data <- read.csv("Kouchaki_raw_data.csv")
Final_Data <- read.csv("Kouchaki_raw_data.csv")
setwd("~/Desktop")
Final_Data <- read.csv("Kouchaki_raw_data.csv")
getwd()
setwd("~/Desktop/Psych_251")
getwd()
setwd("~/Desktop/Psych_251/")
getwd()
Final_Data <- read.csv("Kouchaki_raw_data.csv")
library(here)
library(tidyverse)
library(ggthemes)
Final_Data <- read.csv("Kouchaki_raw_data.csv")
#Step one is to load libraries
library(here)
library(tidyverse)
library(ggthemes)
#Next step is to import the data and make sure it looks ok
#setwd(here())
Final_Data <- read.csv("Kouchaki_raw_data.csv")
setwd("~/Desktop/Psych_251/kouchaki2018")
setwd()
getwd()
library(here)
library(tidyverse)
library(ggthemes)
#Next step is to import the data and make sure it looks ok
setwd(here())
Final_Data <- read.csv("Kouchaki_raw_data.csv")
head(Final_Data)
View(Final_Data)
Final_fil <- Final_Data %>%
select(Finished, PromptEthical:DemoLang)
setwd(here())
Final_Data <- read.csv("Kouchaki_raw_data.csv")
head(Final_Data)
View(Final_Data)
Final_fil <- Final_Data %>%
select(Finished, PromptEthical:DemoLang)
Final_Data_fil <- Final_Data %>%
select(Finished, PromptEthical:DemoLang)
View(Final_Data_fil)
Final_Data_fil <- Final_Data %>%
select(StartDate, Finished, PromptEthical:DemoLang)
View(Final_Data_fil)
Final_Data_fil <- Final_Data_fil %>%
filter(StartDate = grepl("2019-12-07"))
Final_Data_fil <- Final_Data_fil %>%
filter(StartDate == grepl("2019-12-07"))
Final_Data_fil <- Final_Data_fil %>%
filter(StartDate == grepl("2019-12-07"), StartDate)
Final_Data_fil <- Final_Data_fil %>%
filter(StartDate == grepl("2019-12-07"), as.character(StartDate))
Final_Data_fil$StartDate <- as.character(Final_Data_fil$StartDate)
View(Final_Data_fil)
Final_Data_fil <- Final_Data_fil %>%
filter(StartDate == grepl("2019-12-07"), StartDate)
Final_Data_fil <- Final_Data_fil %>%
filter(StartDate == grepl("2019-12-07", StartDate))
View(Final_Data_fil)
Final_Data_fil <- Final_Data %>%
select(StartDate, Finished, PromptEthical:DemoLang)
Final_Data_fil$StartDate <- as.character(Final_Data_fil$StartDate)
Final_Data_fil <- Final_Data_fil %>%
filter(StartDate == !grepl("2019-12-07", StartDate))
Final_Data_fil <- Final_Data %>%
select(StartDate, Finished, PromptEthical:DemoLang)
#And then let's filter out all the people that weren't in the final round of data collection
Final_Data_fil$StartDate <- as.character(Final_Data_fil$StartDate)
View(Final_Data_fil)
Final_Data_fil <- Final_Data_fil %>%
filter(StartDate == !grepl("07", StartDate))
Final_Data_fil <- Final_Data %>%
select(StartDate, Finished, PromptEthical:DemoLang)
Final_Data_fil <- Final_Data_fil %>%
slice(47:222)
Final_Data_fil <- Final_Data %>%
select(StartDate, Finished, PromptEthical:DemoLang)
Final_Data_fil <- Final_Data_fil %>%
slice(48:222)
Final_Data_fil <- Final_Data_fil %>%
mutate(Condition = case_when(
grepl("a|e|i|o|u|y", PromptEthical) ~ 1,
grepl("a|e|i|o|u|y", PromptUnethical) ~ 2,
grepl("a|e|i|o|u|y", PromptTypical) ~ 3
))
Final_Data_fil <- Final_Data_fil %>%
filter(Finished == 1)
Final_Data_fil$Condition <- as.numeric(Final_Data_fil$Condition)
#This converts the Att Check column to numbers
Final_Data_fil$AttCheckSit <-as.numeric(Final_Data_fil$AttCheckSit)
View(Final_Data_fil)
Final_Data_fil <- Final_Data_fil %>%
mutate(AttCheckSit = AttCheckSit-2)
View(Final_Data_fil)
Final_Data_fil <- Final_Data_fil %>%
mutate(Exclude1 = Condition/AttCheckSit)
Final_Data_fil <- Final_Data_fil %>%
filter(Exclude1 == 1)
View(Final_Data_fil)
Final_Data_fil <- Final_Data_fil %>%
filter(SelfDHCheck == 3)
View(Final_Data_fil)
Final_Data_fil <- Final_Data_fil %>%
select(SelfDH1:SelfDH10, Condition)
View(Final_Data_fil)
Final_Data_fil <- Final_Data_fil %>%
mutate_if(is.factor, as.character)
Final_Data_fil <- Final_Data_fil %>%
mutate_if(is.character, as.numeric)
Final_Data_fil <- Final_Data_fil %>%
mutate(Condition = as.factor(Condition))
Final_Data_fil <- Final_Data_fil %>%
mutate(SelfDH_Mean =
rowMeans(select
(., SelfDH1:SelfDH10)))
View(Final_Data_fil)
aov_results <- aov(SelfDH_Mean ~ Condition, data = Final_Data_fil)
summary(aov_results)
Final_Data_fil <- Final_Data_fil %>%
mutate(Condition_Label = case_when(
Condition == 1 ~ "Ethical",
Condition == 2 ~ "Unethical",
Condition == 3 ~ "Neutral")
)
positions <- c("Unethical", "Ethical", "Neutral")
Final_Data_sum <- Final_Data_fil %>%
group_by(Condition_Label) %>%
summarise(Overall_SDH_Mean = mean(SelfDH_Mean),
Overall_SD = sd(SelfDH_Mean),
Overall_SE = sd(SelfDH_Mean)/sqrt(length(Condition_Label)))
Final_Data_sum
Original_Label <- c("Unethical", "Ethical", "Neutral")
Original_Means <- c(5.82, 6.23, 6.16)
Original_SDs <- c(1.11, .65, .73)
Original_ns <- c(49, 54, 53)
Original_Data <- data.frame(Original_Label, Original_Means, Original_SDs, Original_ns)
#And then get the summary to set up the graph
Original_Data_sum = Original_Data %>%
group_by(Original_Label) %>%
summarise(Orig_Over_SDH_Mean = mean(Original_Means),
Orig_Over_SE = Original_SDs/sqrt(Original_ns))
ggplot(Original_Data_sum, aes(x=Original_Label, y=Orig_Over_SDH_Mean, fill=Original_Label)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1") +
labs(title="Original Data", y="Mind Attributed to Self") +
scale_x_discrete(limits = positions) +
coord_cartesian(ylim=c(4,7)) +
geom_errorbar(aes(ymin = Orig_Over_SDH_Mean - Orig_Over_SE, ymax = Orig_Over_SDH_Mean + Orig_Over_SE), position = "dodge")
ggplot(Final_Data_sum, aes(x=Condition_Label, y=Overall_SDH_Mean, fill=Condition_Label)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1") +
labs(title="Replication Data", y="Mind Attributed to Self") +
scale_x_discrete(limits = positions) +
coord_cartesian(ylim=c(4,7)) +
geom_errorbar(aes(ymin = Overall_SDH_Mean - Overall_SE, ymax = Overall_SDH_Mean + Overall_SE), position = "dodge")
ethical_data <- Final_Data_fil %>%
filter(Condition_Label == "Ethical")
View(ethical_data)
unethical_data <- Final_Data_fil %>%
filter(Condition_Label == "Unethical")
neutral_data <- Final_Data_fil %>%
filter(Condition_Label == "Neutral")
t.test(ethical_data$SelfDH_Mean, neutral_data$SelfDH_Mean, alternative = "two.sided")
t.test(ethical_data$SelfDH_Mean, unethical_data$SelfDH_Mean, alternative = "two.sided")
t.test(unethical_data$SelfDH_Mean, neutral_data$SelfDH_Mean, alternative = "two.sided")
write.csv(Final_Data_fil, "Final_Data_Cleaned.csv")
Final_Data <- read.csv("Kouchaki_raw_data.csv")
setwd(here())
setwd(here())
Final_Data <- read.csv("Kouchaki_raw_data.csv")
View(Final_Data)
Final_Data_response <- Final_Data %>%
select(StartDate, IPAddress, LocationLatitude, LocationLongitude, PromptRelevant, Finished, PromptEthical:DemoLang)
Final_Data_response <- Final_Data_response %>%
slice(48:222)
Final_Data_response <- Final_Data_response %>%
mutate(Condition = case_when(
grepl("a|e|i|o|u|y", PromptEthical) ~ 1,
grepl("a|e|i|o|u|y", PromptUnethical) ~ 2,
grepl("a|e|i|o|u|y", PromptTypical) ~ 3
))
Final_Data_response <- Final_Data_response %>%
mutate(Condition = case_when(
grepl("a|e|i|o|u|y", PromptEthical) ~ 1,
grepl("a|e|i|o|u|y", PromptUnethical) ~ 2,
grepl("a|e|i|o|u|y", PromptTypical) ~ 3
))
Final_Data_response <- Final_Data_response %>%
filter(Finished == 1)
View(Final_Data_response)
sum(Final_Data_response$PromptRelevant)
Final_Data_response$Condition <- as.numeric(Final_Data_response$Condition)
Final_Data_response$AttCheckSit <-as.numeric(Final_Data_response$AttCheckSit)
Final_Data_fresponse <- Final_Data_response %>%
mutate(AttCheckSit = AttCheckSit-2)
Final_Data_response <- Final_Data_response %>%
mutate(Exclude1 = Condition/AttCheckSit)
Final_Data_response <- Final_Data_response %>%
filter(Exclude1 == 1)
Final_Data_response <- Final_Data_response %>%
filter(SelfDHCheck == 3)
Final_Data_response <- Final_Data %>%
select(StartDate, IPAddress, LocationLatitude, LocationLongitude, PromptRelevant, Finished, PromptEthical:DemoLang)
Final_Data_response <- Final_Data_response %>%
slice(48:222)
Final_Data_response <- Final_Data_response %>%
mutate(Condition = case_when(
grepl("a|e|i|o|u|y", PromptEthical) ~ 1,
grepl("a|e|i|o|u|y", PromptUnethical) ~ 2,
grepl("a|e|i|o|u|y", PromptTypical) ~ 3
))
Final_Data_response <- Final_Data_response %>%
filter(Finished == 1)
Final_Data_response$Condition <- as.numeric(Final_Data_response$Condition)
Final_Data_response$AttCheckSit <-as.numeric(Final_Data_response$AttCheckSit)
Final_Data_fresponse <- Final_Data_response %>%
mutate(AttCheckSit = AttCheckSit-2)
Final_Data_response <- Final_Data_response %>%
mutate(AttCheckSit = AttCheckSit-2)
View(Final_Data_response)
Final_Data_response <- Final_Data_response %>%
mutate(Exclude1 = Condition/AttCheckSit)
Final_Data_response <- Final_Data_response %>%
filter(Exclude1 == 1)
Final_Data_response <- Final_Data_response %>%
filter(SelfDHCheck == 3)
mean(Final_Data_response$PromptRelevant)
length(unique(Final_Data_response$IPAddress))
Final_Data_response <- Final_Data_response %>%
mutate(SelfDH_Mean =
rowMeans(select
(., SelfDH1:SelfDH10)))
Final_Data_response <- Final_Data_response %>%
select(PromptRelevant, SelfDH1:SelfDH10, Condition)
View(Final_Data_response)
Final_Data_response <- Final_Data_response %>%
mutate_if(is.factor, as.character)
Final_Data_response <- Final_Data_response %>%
mutate_if(is.character, as.numeric)
Final_Data_response <- Final_Data_response %>%
mutate(Condition = as.factor(Condition))
Final_Data_response <- Final_Data_response %>%
mutate(SelfDH_Mean =
rowMeans(select
(., SelfDH1:SelfDH10)))
Final_Data_response <- Final_Data_response %>%
filter(PromptRelevant == 1)
aov_results <- aov(SelfDH_Mean ~ Condition, data = Final_Data_response)
aov_results
aov_results_response <- aov(SelfDH_Mean ~ Condition, data = Final_Data_response)
summary(aov_results_response)
Final_Data_response_sum <- Final_Data_response %>%
group_by(Condition) %>%
summarise(Overall_SDH_Mean = mean(SelfDH_Mean),
Overall_SD = sd(SelfDH_Mean),
Overall_SE = sd(SelfDH_Mean)/sqrt(length(Condition)))
Final_Data_response_sum
Final_Data_sum
ethical_data_response <- Final_Data_response %>%
filter(Condition_Label == "Ethical")
Final_Data_response_sum
ethical_data_response <- Final_Data_response %>%
filter(Condition == "1")
unethical_data_response <- Final_Data_response %>%
filter(Condition == "2")
neutral_data_response <- Final_Data_response %>%
filter(Condition == "3")
t.test(ethical_data_response$SelfDH_Mean, neutral_data_response$SelfDH_Mean, alternative = "two.sided")
t.test(ethical_data_response$SelfDH_Mean, unethical_data_response$SelfDH_Mean, alternative = "two.sided")
t.test(unethical_data_response$SelfDH_Mean, neutral_data_response$SelfDH_Mean, alternative = "two.sided")
Final_Data_quest_sum <- Final_Data_fil %>%
group_by(Condition_Label) %>%
summarise(Overall_SDH_Mean = mean(SelfDH_Mean),
Q1_Mean = mean(SelfDH1),
Q2_Mean = mean(SelfDH2),
Q3_Mean = mean(SelfDH3),
Q4_Mean = mean(SelfDH4),
Q5_Mean = mean(SelfDH5),
Q6_Mean = mean(SelfDH6),
Q7_Mean = mean(SelfDH7),
Q8_Mean = mean(SelfDH8),
Q9_Mean = mean(SelfDH9),
Q10_Mean = mean(SelfDH10)
)
Final_Data_quest_sum
Final_Data_alpha <- Final_Data_fil %>%
select(SelfDH1:SelfDH10)
CronbachAlpha(Final_Data_alpha)
library(DescTools)
CronbachAlpha(Final_Data_alpha)
install.packages("heplots")
library(heplots)
etasq(aov_results, partial = TRUE)
aov_results <- aov(SelfDH_Mean ~ Condition, data = Final_Data_fil)
summary(aov_results)
etasq(aov_results, partial = TRUE)
